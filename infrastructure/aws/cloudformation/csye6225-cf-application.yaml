AWSTemplateFormatVersion: '2010-09-09'
Description: CSYE 6225 - application cf stack

Parameters:
  ImageIdparam:
    Default: "ami-0282cf077acf11412"
    Description: ImageId parameter (eg ami-0282cf077acf11412)
    Type: String
  EC2Subnet:
    Default: "subnet-08edd817a280766ff"
    Description: subnet parameter (eg subnet-08edd817a280766ff)
    Type: String
  myVPC:
    Default: "vpc-0b9b80e139f334558"
    Description: VPC parameter (eg vpc-0b9b80e139f334558)
    Type: String
  RDSSubnet1:
    Default: "subnet-054379b3f39cce09e"
    Description: subnet parameter (eg subnet-08edd817a280766ff)
    Type: String  
  RDSSubnet2:
    Default: "subnet-054379b3f39cce09e"
    Description: subnet parameter (eg subnet-08edd817a280766ff)
    Type: String
  KeyPair:
    Default: "test1-sree"
    Description: Key Pair parameter (eg test1-sree)
    Type: String
  S3BucketName:
    Default: "code-deploy.raik.me.csye6225.com"
    Description: S3 Bucket parameter (eg test1-sree)
    Type: String
  S3BucketNameCD:
    Default: "code-deploy.raik.me.csye6225.com"
    Description: S3 Bucket parameter (eg test1-sree)
    Type: String
  SNSTOPICARN:
    Default: "arn:aws:sns:us-east-1:<account_id>:SNSTopicResetPassword"
    Description: SNS topic ARN for reset password
    Type: String
  DomainName:
    Default: "csye6225-s19-mandakathils.me."
    Description: Domain Name for the server
    Type: String

Resources:

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http, SSH and SSL to client host
      VpcId:
        Ref: myVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value:
          Fn::Join:
            - '-'
            - [{Ref: 'AWS::StackName'}, 'csye6225', 'sg']

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles: 
        - !Ref CodeDeployEC2ServiceRole
    DependsOn: 
      - CodeDeployEC2ServiceRole
  MyEC2Instance: #Creation of EC2
    Type: "AWS::EC2::Instance"
    Properties: 
      IamInstanceProfile : {Ref : InstanceProfile}
      ImageId: {Ref: ImageIdparam} #Refrence to the custom AMI
      InstanceType: t2.micro
      KeyName: {Ref : "KeyPair"}
      UserData:
        Fn::Base64:
          Fn::Join:
            - "\n"
            - [ "#!/bin/bash -xe",
                "sudo bash",
                "export DJANGO_SETTINGS_MODULE=WebProject.settings_dev",
                "cd /home/centos",
                "cat > my.cnf << EOF",
                "[Config]",
                !Join ["",["RDS_HOST=",!GetAtt MyRDSInstance.Endpoint.Address]],
                "RDS_UN=csye6225master",
                "RDS_PASSWORD=csye6225password",
                "RDS_DB=csye6225",
                !Join ["",["DOMAIN_NAME=",!Ref DomainName]],
                !Join ["",["S3_BUCKET=",!Ref S3BucketName]],
                !Join ["",["SNSTOPICARN=",!Ref SNSTOPICARN]],
                "EOF",
              ]
      BlockDeviceMappings: 
          - DeviceName: "/dev/sdm"
            Ebs: 
              VolumeType: "gp2"
              DeleteOnTermination: "true"
              VolumeSize: "20"
          - DeviceName: "/dev/sdk"
            NoDevice: {}
      NetworkInterfaces: 
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet: 
            - Ref: "InstanceSecurityGroup"
          SubnetId: 
            Ref: "EC2Subnet"
      Tags:
      - Key: Name
        Value:
          Fn::Join:
            - '-'
            - [{Ref: 'AWS::StackName'}, 'csye6225', 'EC2']
      - Key: ec2-type
        Value: csye-6225
    DependsOn: 
      - MyRDSInstance
      - CodeDeployEC2ServiceRole

  MyDynamoDB: #creation of DynamoDB
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - 
          AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        - 
          AttributeName: "id"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: "csye6225"
      TimeToLiveSpecification:
        AttributeName: passwordTokenExpiry
        Enabled: 'true'
      Tags:
      - Key: Name
        Value:
          Fn::Join:
            - '-'
            - [{Ref: 'AWS::StackName'}, 'csye6225', 'DynamoDB']

  MyRDSsubnetGroup: 
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: RDS subnet group
      SubnetIds: 
        - Ref: RDSSubnet1
        - Ref: RDSSubnet2
        - Ref: EC2Subnet
      Tags:
      - Key: Name
        Value:
          Fn::Join:
            - '-'
            - [{Ref: 'AWS::StackName'}, 'csye6225', 'rds_subnet']

  RDSSecurityGroup: 
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http, SSH and SSL to client host
      VpcId:
        Ref: myVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        SourceSecurityGroupId: !Ref InstanceSecurityGroup
      Tags:
      - Key: Name
        Value:
          Fn::Join:
            - '-'
            - [{Ref: 'AWS::StackName'}, 'csye6225', 'rds_sg']  

  MyRDSInstance: 
    Type: AWS::RDS::DBInstance
    Properties: 
      AllocatedStorage: "20"
      DBInstanceClass: "db.t2.medium"
      DBInstanceIdentifier: "csye6225-spring2019"
      Engine: "mysql"
      EngineVersion: "5.6.34"
      MultiAZ : false
      MasterUsername: "csye6225master"
      MasterUserPassword: "csye6225password"
      PubliclyAccessible: true
      DBName: "csye6225"
      DBSubnetGroupName: 
        Ref: "MyRDSsubnetGroup"
      VPCSecurityGroups:
        - {Ref : "RDSSecurityGroup"}
      Tags:
      - Key: Name
        Value:
          Fn::Join:
            - '-'
            - [{Ref: 'AWS::StackName'}, 'csye6225', 'rds']

  CodeDeployEC2ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      RoleName: CodeDeployEC2ServiceRole
      AssumeRolePolicyDocument: 
        Version: "2012-10-17" 
        Statement:
           - 
            Effect: "Allow" 
            Principal:
              Service: 
                - "ec2.amazonaws.com" 
            Action: 
              - "sts:AssumeRole" 
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole
        - arn:aws:iam::aws:policy/CloudWatchAgentAdminPolicy        
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM     
      Policies:
        - 
         PolicyName: "EC2-S3-Access"
         PolicyDocument:
           Version: "2012-10-17"
           Statement:            
            - 
              Effect: "Allow"
              Action:
                - "s3:Get*"
                - "s3:List*"
              Resource: 
                Fn::Join:
                - ''
                - ['arn:aws:s3:::',!Ref S3BucketNameCD,'/*']
        -
          PolicyName: "Attachment-EC2-S3"
          PolicyDocument:
           Version: "2012-10-17"
           Statement:            
            - 
              Effect: "Allow"
              Action:
                - "s3:*"
              Resource: 
                Fn::Join:
                - ''
                - ['arn:aws:s3:::',!Ref S3BucketName,'/*']
  SNSAccess:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action:
          - sns:*
          Effect: Allow
          Resource: "*"
      ManagedPolicyName: SNSAccess
      Roles:
      - Ref: CodeDeployEC2ServiceRole

  CodeDeployServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codedeploy.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole'
        - 'arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy'
        - 'arn:aws:iam::aws:policy/CloudWatchAgentAdminPolicy'
      RoleName: CodeDeployServiceRole

  csye6225Webapp:
    Type: 'AWS::CodeDeploy::Application'
    Properties:
      ApplicationName: csye6225-webapp
      ComputePlatform: Server

  DeploymentGroup:
    Type: 'AWS::CodeDeploy::DeploymentGroup'
    Properties:
      ApplicationName: !Ref csye6225Webapp
      DeploymentGroupName: csye6225-webapp-deployment
      Ec2TagFilters:
        - Type: KEY_AND_VALUE
          Key: ec2-type
          Value: csye-6225
      DeploymentConfigName: CodeDeployDefault.OneAtATime
      DeploymentStyle:
        DeploymentType: "IN_PLACE"
        DeploymentOption: "WITHOUT_TRAFFIC_CONTROL"
      AutoRollbackConfiguration:
        Enabled: true
        Events:
          - DEPLOYMENT_FAILURE
      ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn